<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;

class {{ class }} extends Controller
{

    public function __construct(){
        $this->middleware('auth');
        $this->view_path = 'user/';
    }

    public function index(){
        $form     = 'formulir';
        $data['data_tabel']     = [];
        $data['link_data']      = route($form . '_data');
        $data['link_data1']     = route($form . '_data1');
        $data['link_delete']    = route($form . '_delete');
        $data['link_save']      = route($form . '_save');
    
        $data['judul']          = 'Form ' . $form;
        session(['menu_active'  => $form ]);
        return view($this->view_path. $form . '_index' ,$data);
    }

    public function data(Request $request){
        $q = DB::table('users')->get();
        $result = [];
        foreach ($q as $key => $value) {
            $row = [
                'nomer' =>($key + 1),
                'id' => $value->id ,
                'name' => $value->user_name,
                //'enid' => enkripsi($value->id) ,
            ];
            $result[] = $row;
        }
        $ret = [
            "code"      => "00",
            "title"     => "OK",
            "message"   => "OK",
            "icon"      => "success",
            "errors"    => [],
            "data"      => $result,
            "xresult"   => $q,
        ];
        return response()->json($ret, 200);
    }

    public function data1(Request $request){
        $id = $request->id;
        $q = DB::table('users')->where('id', $id)->first();
        if ($q == null) {
            $ret = [
                "code"      => '01',
                "title"     => 'Data tidak ditemukan',
                "message"   => "Data tidak ditemukan",
                "icon"      => 'error',
                "errors"    => []
            ];
            return response()->json($ret, 200);
        }
        
        $q->name = $q->user_name;
        $ret = [
            "code"      => '00',
            "title"     => 'OK',
            "message"   => "OK",
            "icon"      => 'success',
            "errors"    => [],
            "data"      => $q,
        ];
        return response()->json($ret, 200);
    }


    public function save(Request $request){
        $rule = [
            'name'      => 'required|min:5|max:100',
        ];
        $validated = Validator::make($request->all(), $rule);
        if($validated->fails()){
            $ret = [
                "code"      => '01',
                "title"     => 'Kurang Valid',
                "message"   => "Isi data dengan valid. " . $validated->errors()->first(),
                "icon"      => 'error',
                "errors"    => $validated->errors()
            ];
            return response()->json($ret, 200);
        }
    
        $data = [
            'name' => $request->name,
        ];
        if ($request->id == ''){
            $id = DB::table('users')
            ->insertGetId($data);
        }
        else{
            $id = $request->id;
            DB::table('users')
            ->where('id',$request->id)
            ->update($data);
        } 
    
        $ret = [
            "code"      => '00',
            "title"     => 'OK',
            "message"   => "Data telah disimpan",
            "icon"      => 'success',
            "errors"    => [],
            "id"        => $id,
        ];
        return response()->json($ret, 200);
    }

    public function delete(Request $request){
        $id = $request->id;
        $c  = [];
        $c['transaksi'] = DB::table('other_table')->where('user', $id)->count();
        $cek = 0;
        $tempat  = '';
        foreach ($c as $key => $value) {
               $cek += $value; 
               $tempat .= $value !=0 ? $key .',' : '' ;
        }
        if ($cek != 0) {
            $ret = [
                "code"      => '01',
                "title"     => 'Tidak terhapus',
                "message"   => "Data masih digunakan {$tempat} ",
                "icon"      => 'error',
                "errors"    => []
            ];
            return response()->json($ret, 200);
        }
    
        DB::table('users')->where('id', $id)->delete();
        $ret = [
            "code"      => '00',
            "title"     => 'OK',
            "message"   => "Data telah dihapus",
            "icon"      => 'success',
            "errors"    => []
        ];
        return response()->json($ret, 200);
    }
    
}
